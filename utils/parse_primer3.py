#!/usr/bin/env python3
"""
Primer3ÁªìÊûúËß£ÊûêÂ∑•ÂÖ∑ / Primer3 Result Parser Tool
"""

import sys
import argparse
from pathlib import Path

# Add toolkit to path
toolkit_path = Path(__file__).parent.parent / "primer_design_toolkit"
sys.path.insert(0, str(toolkit_path))

from primer3_parser import Primer3Parser


def main():
    """‰∏ªÂáΩÊï∞ / Main function"""
    
    parser = argparse.ArgumentParser(
        description="Ëß£ÊûêPrimer3ËæìÂá∫Êñá‰ª∂ / Parse Primer3 output files",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
‰ΩøÁî®Á§∫‰æã / Usage Examples:
  python parse_primer3.py primer3_output.txt parsed_primers.csv
  
ÂäüËÉΩËØ¥Êòé / Function Description:
  Â∞ÜPrimer3ÁöÑÂéüÂßãËæìÂá∫ËΩ¨Êç¢‰∏∫ÁªìÊûÑÂåñÁöÑCSVÊ†ºÂºè
  Convert Primer3 raw output to structured CSV format
        """
    )
    
    parser.add_argument("input_file", help="Primer3ËæìÂá∫Êñá‰ª∂ / Primer3 output file")
    parser.add_argument("output_file", help="ËæìÂá∫CSVÊñá‰ª∂ / Output CSV file")
    parser.add_argument("--verbose", "-v", action="store_true", 
                       help="ËØ¶ÁªÜËæìÂá∫ / Verbose output")
    
    args = parser.parse_args()
    
    try:
        print("üîß Primer3 Result Parser")
        print(f"üì• Input file: {args.input_file}")
        print(f"üì§ Output file: {args.output_file}")
        
        # Ê£ÄÊü•ËæìÂÖ•Êñá‰ª∂ / Check input file
        if not Path(args.input_file).exists():
            print(f"‚ùå Input file not found: {args.input_file}")
            sys.exit(1)
        
        # Ëß£ÊûêÊñá‰ª∂ / Parse file
        parser_obj = Primer3Parser()
        df = parser_obj.parse_file(args.input_file, args.output_file)
        
        print(f"‚úÖ Successfully parsed {len(df)} primer pairs")
        print(f"üìÅ Results saved to: {args.output_file}")
        
        if args.verbose and len(df) > 0:
            print("\nüìä Parsing Summary:")
            print(f"   Number of primer pairs: {len(df)}")
            print(f"   Number of genes: {df['Gene'].nunique()}")
            print(f"   Average product size: {df['Product_Size'].mean():.1f} bp")
        
    except Exception as e:
        print(f"‚ùå Parsing failed: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main() 